class Solution:

    def isValidSudoku(self, board: list) -> bool:

        for i in range(9):
            rw = [int(j) for j in board[i] if j != '.']
            cl = [int(board[j][i]) for j in range(9) if board[j][i] != '.']

            if 0 <= i < 3:
                m = range(3)
            elif 3 <= i < 6:
                m = range(3, 6)
            else:
                m = range(6, 9)

            n = range((i % 3) * 3, ((i % 3) * 3) + 3)

            # # ROWS AND COLS of ith GRID
            # print("i: {}, m: {}, n: {}".format(i, m, n))

            gd = [int(board[grid_row][grid_col]) for grid_row in m for grid_col in n if
                  board[grid_row][grid_col] != "."]

            # print(rw, cl, gd)

            if len(rw) != len(set(rw)) \
                    or len(cl) != len(set(cl)) \
                    or len(gd) != len(set(gd)):
                return False
        return True


f = Solution()
print(f.isValidSudoku(board=
                      [["5", "3", ".", ".", "7", ".", ".", ".", "."]
                          , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
                          , [".", "9", "8", ".", ".", ".", ".", "6", "."]
                          , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
                          , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
                          , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
                          , [".", "6", ".", ".", ".", ".", "2", "8", "."]
                          , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
                          , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]))
print(f.isValidSudoku(board=
                            [["8", "3", ".", ".", "7", ".", ".", ".", "."]
                          , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
                          , [".", "9", "8", ".", ".", ".", ".", "6", "."]
                          , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
                          , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
                          , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
                          , [".", "6", ".", ".", ".", ".", "2", "8", "."]
                          , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
                          , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]))
print(f.isValidSudoku(board=
                      [[".", ".", "4", ".", ".", ".", "6", "3", "."],
                       [".", ".", ".", ".", ".", ".", ".", ".", "."],
                       ["5", ".", ".", ".", ".", ".", ".", "9", "."],
                       [".", ".", ".", "5", "6", ".", ".", ".", "."],
                       ["4", ".", "3", ".", ".", ".", ".", ".", "1"],
                       [".", ".", ".", "7", ".", ".", ".", ".", "."],
                       [".", ".", ".", "5", ".", ".", ".", ".", "."],
                       [".", ".", ".", ".", ".", ".", ".", ".", "."],
                       [".", ".", ".", ".", ".", ".", ".", ".", "."]]))

# Note: The solution that you posted on 28-03-2023 did not seem to be your logic. The one that you posted on 16-06-2024 is yours.
